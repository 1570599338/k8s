apiVersion: v1
kind: Namespace
metadata:
  name: eureka-ns  # namespace空间

---
#创建Service
apiVersion: v1
kind: Service
metadata:
  name: eureka-hl
  namespace: eureka-ns  # namespace空间
spec:
  selector:
    app: eureka-app
    workload.user.cattle.io/workloadselector: apps.statefulset-test-eureka
  ports:
    - name: eureka
      port: 8080
      protocol: TCP
      targetPort: 8082
  type: ClusterIP

---
#创建pod控制器
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eureka-pod-controller
  namespace: eureka-ns
  labels:
    app: eureka
    workload.user.cattle.io/workloadselector: apps.statefulset-test-eureka
spec:
  podManagementPolicy: OrderedReady
  replicas: 2
  selector:
    matchLabels:
      app: eureka-app
      workload.user.cattle.io/workloadselector: apps.statefulset-test-eureka
  serviceName:  eureka-hl  # 无头服务名称
  template:
    metadata:
      name: eureka-templ
      labels:
        app: eureka-app
        workload.user.cattle.io/workloadselector: apps.statefulset-test-eureka
    spec:
      containers: # 容器信息
        - name: eureka
          env:
          - name: EUREKA_URL
            #相同的服务内可以简写
            value:  http://eureka-0.eureka-hl:8082/eureka/,http://eureka-1.eureka-hl:8082/eureka/
          image: registry.cn-hangzhou.aliyuncs.com/lquan/eureka:v01 #镜像
         ## command: ["/bin/bash", "-ce", "tail -f /dev/null"]
          imagePullPolicy: Always  #拉取策略
          command:
            - bash
            - -x
            - -c
            - |
              SERVERS=2 &&
              HOST=`hostname -s` &&
              DOMAIN=`hostname -d` &&
              CLIENT_PORT=2181 &&
              SERVER_PORT=2888 &&
              ELECTION_PORT=3888 &&
              PROMETHEUS_PORT=7000 &&
              ZOO_DATA_DIR=/lquan/zookeeper/data &&
              ZOO_DATA_LOG_DIR=/lquan/zookeeper/datalog &&
              {
                 echo "clientPort=${CLIENT_PORT}"
                 echo 'tickTime=2000'
                 echo 'initLimit=300'
                 echo 'syncLimit=10'
                 echo 'maxClientCnxns=2000'
                 echo 'maxSessionTimeout=60000000'
                 echo "dataDir=${ZOO_DATA_DIR}"
                 echo "dataLogDir=${ZOO_DATA_LOG_DIR}"
                 echo 'autopurge.snapRetainCount=10'
                 echo 'autopurge.purgeInterval=1'
                 echo 'preAllocSize=131072'
                 echo 'snapCount=3000000'
                 echo 'leaderServes=yes'
                 echo 'standaloneEnabled=false'
                 echo '4lw.commands.whitelist=*'
                 echo 'metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider'
                 echo "metricsProvider.httpPort=${PROMETHEUS_PORT}"
              } > /lquan/zoo.cfg &&
              {
                 echo "zookeeper.root.logger=CONSOLE"
                 echo "zookeeper.console.threshold=INFO"
                 echo "log4j.rootLogger=\${zookeeper.root.logger}"
                 echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender"
                 echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}"
                 echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout"
                 echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n"
               } > /lquan/log4j.properties &&
               echo 'JVMFLAGS="-Xms128M -Xmx4G -XX:+UseG1GC -XX:+CMSParallelRemarkEnabled"' > /lquan/java.env &&

               if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
                    NAME=${BASH_REMATCH[1]}
                    ORD=${BASH_REMATCH[2]}
               else
                    echo "Failed to parse name and ordinal of Pod"
                    exit 1
               fi &&

               mkdir -p ${ZOO_DATA_DIR} &&
               mkdir -p ${ZOO_DATA_LOG_DIR} &&
               export MY_ID=$((ORD+1)) &&
               echo $MY_ID > $ZOO_DATA_DIR/myid &&
               for (( i=1; i<=$SERVERS; i++ )); do
                  echo "server.$i=$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT" >> /lquan/zoo.cfg;
               done &&
              #chown -Rv lquan:lquan "$ZOO_DATA_DIR" "$ZOO_DATA_LOG_DIR" "$ZOO_LOG_DIR" "$ZOO_CONF_DIR" &&
              chown -Rv lquan:lquan "$ZOO_DATA_DIR" "$ZOO_DATA_LOG_DIR" &&
              sh /lquan/bootstrap.sh
      restartPolicy: Always  #重启策略



























