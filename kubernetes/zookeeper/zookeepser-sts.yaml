#创建service服务
apiVersion: v1
kind: Service
metadata:
  # DNS would be like zookeeper.zoons
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
    what: node
  ports:
    - name: client
      port: 2181
    - name: prometheus
      port: 7000
#  type: NodePort

---

#创建headless服务
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-headless
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
    what: node
  ports:
    - name: server
      port: 2888
    - name: leader-election
      port: 3888
  clusterIP: None
  #type: NodePort


  # 创建PodDisruptionBudget控制器
  # Pod Disruption Budget (pod 中断 预算) 简称PDB, 含义其实是终止pod前通过 labelselector
  # 机制获取正常运行的pod数目的限制，目的是对资源中断保护措施
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zookeeper-pod-disruption-budget

spec:
  selector:
    matchLabels:
      app: zookeeper
  minAvailable: 1


---
#创建部署zookeeper集群
apiVersion: apps/v1
kind: StatefulSet
metadata:
  #nodes would be named as zookeeper-0,zookeeper-1,zookeeper-2
  name: zookeeper

spec:
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper-headless
  replicas: 3
  updateStrategy:
    type: RollingUpdate

  podManagementPolicy: Parallel
  template:
    metadata:
     # name:
      labels:
        app: zookeeper
        what: node
      annotations:  # ------不知道啥意思
        prometheus.io/port: '7000'
        prometheus.io/scrape: 'true'

    spec:
#     pod亲和性topologyKey
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            - labelSelector:
#                matchExpressions:
#                  - key: "app"
#                    operator: In
#                    values:
#                      - zookeeper
#              topologyKey:  "kubernetes.io/hostname"

      containers:
        - name: zookeeper
          image: nginx:1.17.1
          imagePullPolicy: IfNotPresent
#          resources:
#            requests:
#              memory: "500Mi"
#              cpu: "0.5"
#            limits:
#              memory: "1Gi"
          ports:
            - name: client
              containerPort: 2181
            - name: server
              containerPort: 2888
            - name: leader-election
              containerPort: 3888
            - name: prometheus
              containerPort: 7000

          command:
            - bash
            - -x
            - -c
            - |
              SERVERS=3 &&
              HOST=`hostname -s` &&
              DOMAIN=`hostname -d` &&
              CLIENT_PORT=2181 &&
              SERVER_PORT=2888 &&
              ELECTION_PORT=3888 &&
              PROMETHEUS_PORT=7000 &&
              ZOO_DATA_DIR=/var/lib/zookeeper/data &&
              ZOO_DATA_LOG_DIR=/var/lib/zookeeper/datalog &&
              {
                 echo "clientPort=${CLIENT_PORT}"
                 echo 'tickTime=2000'
                 echo 'initLimit=300'
                 echo 'syncLimit=10'
                 echo 'maxClientCnxns=2000'
                 echo 'maxSessionTimeout=60000000'
                 echo "dataDir=${ZOO_DATA_DIR}"
                 echo "dataLogDir=${ZOO_DATA_LOG_DIR}"
                 echo 'autopurge.snapRetainCount=10'
                 echo 'autopurge.purgeInterval=1'
                 echo 'preAllocSize=131072'
                 echo 'snapCount=3000000'
                 echo 'leaderServes=yes'
                 echo 'standaloneEnabled=false'
                 echo '4lw.commands.whitelist=*'
                 echo 'metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider'
                 echo "metricsProvider.httpPort=${PROMETHEUS_PORT}"
              } > /conf/zoo.cfg &&
              {
                 echo "zookeeper.root.logger=CONSOLE"
                 echo "zookeeper.console.threshold=INFO"
                 echo "log4j.rootLogger=\${zookeeper.root.logger}"
                 echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender"
                 echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}"
                 echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout"
                 echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n"
               } > /conf/log4j.properties &&
               echo 'JVMFLAGS="-Xms128M -Xmx4G -XX:+UseG1GC -XX:+CMSParallelRemarkEnabled"' > /conf/java.env &&

               if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
                    NAME=${BASH_REMATCH[1]}
                    ORD=${BASH_REMATCH[2]}
               else
                    echo "Failed to parse name and ordinal of Pod"
                    exit 1
               fi &&

               mkdir -p ${ZOO_DATA_DIR} &&
               mkdir -p ${ZOO_DATA_LOG_DIR} &&
               export MY_ID=$((ORD+1)) &&
               echo $MY_ID > $ZOO_DATA_DIR/myid &&
               for (( i=1; i<=$SERVERS; i++ )); do
                  echo "server.$i=$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT" >> /conf/zoo.cfg;
               done &&
               chown -Rv zookeeper "$ZOO_DATA_DIR" "$ZOO_DATA_LOG_DIR" "$ZOO_LOG_DIR" "$ZOO_CONF_DIR" &&
               zkServer.sh start-foreground
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - "OK=$(echo ruok | nc 127.0.0.1 2181); if [[ \"$OK\" == \"imok\" ]]; then exit 0; else exit 1; fi"
            initialDelaySeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - bash
                - -c
                - "OK=$(echo ruok | nc 127.0.0.1 2181); if [[ \"$OK\" == \"imok\" ]]; then exit 0; else exit 1; fi"
            initialDelaySeconds: 10
            timeoutSeconds: 5






      restartPolicy: Always
























































